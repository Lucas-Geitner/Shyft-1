<div class="text-center week-name">
  <h1>
    <% unless @week == 1 %>
      <%= link_to planning_path(@planning, week: (@week - 1), day: @day), class: "text-center" do %>
        <i class="fa fa-caret-left"></i>
      <% end %>
    <% end %>
    <% first_day = @planning.start_date + ((@week - 1) * 7).days %>
    Semaine du <%= first_day.strftime("%e") + " " + french_months(first_day.strftime("%B")) + " " + first_day.strftime("%Y") %>
    <% unless @week >= ((@planning.end_date - @planning.start_date) / 604800).ceil %>
      <%= link_to planning_path(@planning, week: (@week + 1), day: @day), class: "text-center" do %>
        <i class="fa fa-caret-right"></i>
      <% end %>
    <% end %>
  </h1>
</div>

<div class="agenda-buttons text-right">
  <div class="container postes-list">
    <div class="row">
      <% @postes.each do |poste, logo| %>
        <div class="col-xs-6 col-sm-1">
          <div class="poste resizable grab flex-center" style="background-color: <%= poste.color %>"><%= poste.name %></div>
        </div>
      <% end %>
    </div>
  </div>
  <div class="week-buttons">
    <%= link_to "Aperçu journée", planning_path(@planning, week: @week, day: params[:day]), class: "text-center active" %>
    <%= link_to "Aperçu semaine", week_view_path(@planning, week: @week), class: "tab" %>
  </div>
</div>

<div class="agenda-and-employees">
  <div class="agenda-wrapper">
    <div class="tab-wrapper">
      <div class="tabs">
        <% (1..7).each do |n| %>
          <% day_n = (@planning.start_date + ((n - 1) + ((@week - 1) * 7)).days) %>
          <%= link_to planning_path(@planning, week: @week, day: n), class: "tab #{"active" if day_n == @today }" do %>
            <div>
              <%= french_days(day_n.strftime('%A')) %>
              <div class="small-date"><%= day_n.strftime('%d') + " " + french_months(day_n.strftime('%b')) %></div>
            </div>
          <% end %>
        <% end %>
      </div>
    </div>

    <div id="agenda">
      <div class="employee-names">
        <ul class="list-unstyled text-right">
          <% @employees.each do |employee| %>
            <% employee_postes = "" %>
            <% @postes.each do |poste, logo| %>
              <% if employee.postes.exists?(poste) %>
                <% employee_postes += "<img src='#{logo}' alt='#{poste.name}' />" %>
              <% end %>
            <% end %>
            <% popover_content = "<div class='panel panel-default popover-table'>
                                    <div class='panel-heading'>
                                      Postes
                                    </div>
                                    <div class='postes-flex'>
                                      <div class='postes-flex-item'>
                                        #{employee_postes}
                                      </div>
                                    </div>
                                  </div>" %>
            <%= link_to user_path(employee) do %>
              <li data-toggle="popover" data-content="<%= popover_content %>">
                <div class="user-details-icon">
                  <%= employee.first_name[0]+ employee.last_name[0] %>
                </div>
                <div>
                  <%= employee.first_name %>
                </div>
              </li>
            <% end %>
          <% end %>
        </ul>
      </div>
      <div style="position: relative;">
        <div class="time-headers">
          <% @range.each do |time| %>
            <div class="time-header"><%= time %>:00</div>
          <% end %>
        </div>
        <table id="planner">
          <tr>
            <% @range.each do |time| %>
              <th colspan="2"></td>
            <% end %>
          </tr>
          <% @employees.each do |employee| %>
            <tr>
              <% @range.each do |time| %>
                <td class="time-cell" id="<%= "#{time}/#{employee.id}" %>"><div class="blech"></div></td>
                <td class= "time-cell" id="<%= "#{time}.5/#{employee.id}" %>" style="border-left: 1px dotted rgba(37,50,56,0.2)"><div class="blech"></div></td>
              <% end %>
            </tr>
          <% end %>
        </table>
        <div class="bin-row">
          <div id="bin">
            <i class="fa fa-trash"></i>
          </div>
          <div class="flex-align">
            <% if @planning.status == "Ongoing" %>
              <%= simple_form_for(@planning, url: declare_path(@planning), method: :patch) do |f| %>
                <%= f.submit 'Sauvegarder', class: "btn btn-default save-button"%>
              <% end %>
            <% elsif @planning.status == "Declared" %>
              <div class="skill-button-green">Déclaré</div>
              <%= link_to export_path(@planning), class: "btn btn-default" do %>
                <i class="fa fa-print"></i>
              <% end %>
            <% end %>
          </div>
        </div>
      </div>
      <div id="forms">
        <!-- Create -->
        <%= simple_form_for([@planning, @shift], remote: true) do |f| %>
          <%= f.input :starts_at, start_year: @today.year, end_year: @today.year, discard_day: true, discard_month: true, discard_year: true, label: false %>
          <%= f.input :ends_at, start_year: @today.year, end_year: @today.year, discard_day: true, discard_month: true, discard_year: true, label: false %>
          <%= f.input :poste, as: :hidden %>
          <%= f.input :user, as: :hidden %>
        <% end %>
        <!-- Update -->
        <%= simple_form_for([@planning, @shift], url: find_and_update_path(@planning), html: { id: "find_update" }, remote: true) do |f| %>
          <%= f.input :starts_at, start_year: @today.year, end_year: @today.year, discard_day: true, discard_month: true, discard_year: true, label: false %>
          <%= f.input :ends_at, start_year: @today.year, end_year: @today.year, discard_day: true, discard_month: true, discard_year: true, label: false %>
          <%= f.input :poste, input_html: { id: "update_poste" }, as: :hidden %>
          <%= f.input :user, input_html: { id: "update_user" }, as: :hidden  %>
        <% end %>
        <!-- Destroy -->
          <%= simple_form_for([@planning, @shift], url: find_and_destroy_path(@planning), html: { id: "find_destroy" }, remote: true) do |f| %>
          <%= f.input :starts_at, start_year: @today.year, end_year: @today.year, discard_day: true, discard_month: true, discard_year: true, label: false %>
          <%= f.input :poste, input_html: { id: "destroy_poste" }, as: :hidden  %>
          <%= f.input :user, input_html: { id: "destroy_user" }, as: :hidden  %>
        <% end %>
      </div>
    </div>
  </div>
</div>

<% content_for :scripts do %>
  <script>

    // Creating popover for postes
    $(function() {
      $('[data-toggle="popover"]').popover({
        container: 'body',
        html: true,
        trigger: 'hover',
        delay: {"show": "300", "hide": "50"},
        placement: 'bottom'
      });
      $("#edit_planning_<%= @planning.id %> input").click(function(e) {
        var planningNum = $(this).parent().attr("id").match(/\d+/)
        console.log(planningNum);
        $(this).parent().parent().append("<div class='skill-button-green'>Déclaré</div><a class='btn btn-default' href='/plannings/" + planningNum + "/export'><i class='fa fa-print'></i></a>");
        $(this).hide();
      });

      // adding already created shifts to the planning
      // The time cells have an id with time/User_id, that's how you access them
      <% @planning.shifts.each do |shift| %>
        <% if shift.starts_at %>
          <% if shift.starts_at.strftime("%F") == @today.strftime("%F") %>
            <% minutes = (shift.ends_at - shift.starts_at) / 60 %>
            <% if shift.starts_at.min > 0 %>
              $("#<%= "#{shift.starts_at.hour}\\\\.5\\\\/#{shift.user_id}" %>").append('<div class="poste resizable grab item flex-center" style="background-color: <%= shift.poste.color %>; width: <%= minutes %>px"><%= shift.poste.name %></div>')
            <% else %>
              $("#<%= "#{shift.starts_at.hour}\\\\/#{shift.user_id}" %>").append('<div class="poste resizable grab item flex-center" style="background-color: <%= shift.poste.color %>; width: <%= minutes %>px"><%= shift.poste.name %></div>')
            <% end %>
          <% end %>
        <% end %>
      <% end %>
      // setting up variables for later
      var uniqueIdForItems = 0
      var cellsDroppedIn = [];

      // In the forms, the date cells cannot be given a default value, so you have to add the default value by hand. This is done here
      // The date cells are used to find shifts (by start time) as well as creating them
      $("#find_destroy #shift_starts_at_1i").val("<%= @today.year %>")
      $("#find_destroy #shift_starts_at_2i").val("<%= @today.month %>")
      $("#find_destroy #shift_starts_at_3i").val("<%= @today.day %>")
      $("#new_shift #shift_starts_at_1i").val("<%= @today.year %>")
      $("#new_shift #shift_starts_at_2i").val("<%= @today.month %>")
      $("#new_shift #shift_starts_at_3i").val("<%= @today.day %>")
      $("#new_shift #shift_ends_at_1i").val("<%= @today.year %>")
      $("#new_shift #shift_ends_at_2i").val("<%= @today.month %>")
      $("#new_shift #shift_ends_at_3i").val("<%= @today.day %>")
      $("#find_update #shift_starts_at_1i").val("<%= @today.year %>")
      $("#find_update #shift_starts_at_2i").val("<%= @today.month %>")
      $("#find_update #shift_starts_at_3i").val("<%= @today.day %>")
      $("#find_update #shift_ends_at_1i").val("<%= @today.year %>")
      $("#find_update #shift_ends_at_2i").val("<%= @today.month %>")
      $("#find_update #shift_ends_at_3i").val("<%= @today.day %>")

      // POSTE DRAG
      $(".poste").draggable({
        cursor: "grabbing",
        helper: "clone",
        snap: ".time-cell",
        snapMode: "inner",
        // When the drag ends outside of the planning, the poste reverts back to its original space, and the 'find destroy' form is not submitted. To tell draggable to revert, you need to add "return 'invalid'". Else the form is submitted, since the drop was valid
        revert: function(socketObj) {
          if (socketObj.length > 0) {
            $('#find_destroy').submit()
          } else {
            return 'invalid'
          }
        },
        start: function(e, ui) {
          // Changing the cursor look when dragging, through classes
          $(ui.helper).removeClass("grab")
          $(ui.helper).addClass("dragged-poste")
          cellsDroppedIn = []

          // finding and destroying the shift that's being dragged
          // only done if the dragged thing is a shift (has class item). Does NOT do anything for the 'draggable' buttons at the top of the planning
          if ($(ui.helper).hasClass("item")) {
            var elementId = $(ui['helper']['0']).parent().attr("id")
            var employeeName = elementId.match(/\/(.*)$/)[1]
            var jobName = e.target.textContent
            var startTime = parseFloat(elementId)
            var lineInList = $("li:contains('" + employeeName + ": " + startTime + "h -')")
            if ( startTime % 1 > 0 ) {
              var startSeconds = 30
            } else {
              var startSeconds = "00"
            }
            $("#find_destroy #shift_starts_at_4i").val(('0' + Math.floor(startTime)).slice(-2))
            $("#find_destroy #shift_starts_at_5i").val(startSeconds)
            $('#destroy_user').val(employeeName)
            $('#destroy_poste').val(jobName)
            $(lineInList).remove()
          }
        },
      });

      // RESIZE

      $(".item").resizable({
        grid: 30,
        stop: function(e, ui) {

          // UPDATE
          var elementId = $(ui.element[0]).parent().attr("id")
          var employeeName = elementId.match(/\/(.*)$/)[1]
          var jobName = e.target.textContent
          var startTime = parseFloat(elementId)
          var endTime = startTime + ($(e.target)[0].clientWidth / 60)
          if (endTime > 23.5) {
            endTime -= 24
          }
          if ( startTime % 1 > 0 ) {
            var startSeconds = 30
          } else {
            var startSeconds = "00"
          }
          if ( endTime % 1 > 0 ) {
            var endSeconds = 30
          } else {
            var endSeconds = "00"
          }
          $('#update_poste').val(jobName)
          $("#find_update #shift_starts_at_4i").val(('0' + Math.floor(startTime)).slice(-2))
          $("#find_update #shift_starts_at_5i").val(startSeconds)
          $("#find_update #shift_ends_at_4i").val(('0' + Math.floor(endTime)).slice(-2))
          $("#find_update #shift_ends_at_5i").val(endSeconds)
          $("#update_user").val(employeeName)
          $("#find_update").submit()
        }
      });

      // DROP
      // Blech is an invisible, 1px high cell inside the td, that allows for all the postes to be aligned.
      // If the cell itself was droppable, since the poste is smaller than the cell, they could stick to the top OR the bottom of the cell, and look weird, or stick to the wrong cell.
      $(".blech").droppable({
        tolerance: "touch",
        drop: function( event, ui ) {
          cellsDroppedIn.push(parseFloat($(this).parent().attr("id")))
          if (cellsDroppedIn.length === 1) {
            // if the dragged poste was NOT a shift, therefore if it came from one of the poste buttons on top
            if ($(ui.draggable).hasClass("item") === false) {
              // appends a clone, allowing for the poste to be dragged and dropped again (that way you can put multiple people in the same poste)
              $(this).parent().append($(ui.draggable).clone().addClass("item i-" + uniqueIdForItems).attr('data-toggle', 'popover').attr('data-placement', 'bottom'));

              // removing draggable and resizable to allow them to be added again, making the shift draggable/droppable/resizable
              $(".item").removeClass("ui-draggable product");
              $('.i-' + uniqueIdForItems).find('.ui-resizable-handle').remove();

              // ITEM DRAG

              $(".item").draggable({
                snap: ".time-cell",
                scroll: false,

                // DELETE
                // same as above
                revert: function(socketObj) {
                    if (socketObj.length > 0) {
                      $('#find_destroy').submit()
                    } else {
                      return 'invalid'
                    }
                  },
                start: function(e, ui) {
                  cellsDroppedIn = []
                  var elementId = $(ui['helper']['0']).parent().attr("id")
                  var employeeName = elementId.match(/\/(.*)$/)[1]
                  var jobName = e.target.textContent
                  var startTime = parseFloat(elementId)
                  var lineInList = $("li:contains('" + employeeName + ": " + startTime + "h -')")
                  if ( startTime % 1 > 0 ) {
                    var startSeconds = 30
                  } else {
                    var startSeconds = "00"
                  }
                  $("#find_destroy #shift_starts_at_4i").val(('0' + Math.floor(startTime)).slice(-2))
                  $("#find_destroy #shift_starts_at_5i").val(startSeconds)
                  $('#destroy_user').val(employeeName)
                  $('#destroy_poste').val(jobName)
                  $(lineInList).remove()
                }
              });

              // ITEM RESIZE

              $(".item").resizable({
                grid: 30,
                stop: function(e, ui) {

                    // ITEM UPDATE

                    var elementId = $(ui.element[0]).parent().attr("id")
                    var employeeName = elementId.match(/\/(.*)$/)[1]
                    var jobName = e.target.textContent
                    var startTime = parseFloat(elementId)
                    var endTime = startTime + ($(e.target)[0].clientWidth / 60)
                    if (endTime > 23.5) {
                      endTime -= 24
                    }
                    if ( startTime % 1 > 0 ) {
                      var startSeconds = 30
                    } else {
                      var startSeconds = "00"
                    }
                    if ( endTime % 1 > 0 ) {
                      var endSeconds = 30
                    } else {
                      var endSeconds = "00"
                    }
                    $('#update_poste').val(jobName)
                    $("#find_update #shift_starts_at_4i").val(('0' + Math.floor(startTime)).slice(-2))
                    $("#find_update #shift_starts_at_5i").val(startSeconds)
                    $("#find_update #shift_ends_at_4i").val(('0' + Math.floor(endTime)).slice(-2))
                    $("#find_update #shift_ends_at_5i").val(endSeconds)
                    $("#update_user").val(employeeName)
                    $("#find_update").submit()
                }
              });

            } else {
              // if the dropped item IS a shift, you just append it as such, making sure it sticks to the cell perfectly, via css
              $(this).parent().append($(ui.draggable).css({"top": "0", "left": "0"}));
            }

            // CREATE

            var startTime = cellsDroppedIn[0]
            var endTime = startTime + ( $(ui.draggable)[0].clientWidth / 30 / 2 )
            var employeeName = $(this).parent().attr("id").match(/\/(.*)$/)[1];
            var jobName = $(ui.draggable)[0].textContent
            if ( startTime % 1 > 0 ) {
              var startSeconds = 30
            } else {
              var startSeconds = "00"
            }
            if ( endTime % 1 > 0 ) {
              var endSeconds = 30
            } else {
              var endSeconds = "00"
            }
            $('#shift_poste').val(jobName)
            $("#new_shift #shift_starts_at_4i").val(('0' + Math.floor(startTime)).slice(-2))
            $("#new_shift #shift_starts_at_5i").val(startSeconds)
            $("#new_shift #shift_ends_at_4i").val(('0' + Math.floor(endTime)).slice(-2))
            $("#new_shift #shift_ends_at_5i").val(endSeconds)
            $("#new_shift #shift_user").val(employeeName)
            uniqueIdForItems += 1
            $("#new_shift").submit()
          }
        }
      });

      // BIN
      // Just deletes the shift visually. Since the bin is droppable, the 'find destroy' form above is automatically filled

      $("#bin").droppable({
        tolerance: "touch",
        accept: '.item',
        drop: function(event, ui) {
          $(ui.draggable).remove();
        }
      });
    });
  </script>
<% end %>

<% content_for :title_tag do %>
Planning <%= @planning.id %>, créé par <%= @planning.user.name %>
<% end %>
